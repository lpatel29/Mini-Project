# -*- coding: utf-8 -*-
"""2 Minor_Project_score 0.71875 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N8gMXvPDBvo1ktTtQIiZJboKINLzbTOc
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install ipython-autotime
# %load_ext autotime

#DATA GATHERING- stored in gdrive

#PREPROCESSING
import os
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from skimage.io import imread
from skimage.transform import resize

target = []
images = []
flat_data = []

DATADIR ='/content/drive/MyDrive/Images'
CATEGORIES = ['RED_APPLE','BANANA','GRAPES']

for i in CATEGORIES:
  print(i)

#numbering the categories
for i in CATEGORIES:
  class_num = CATEGORIES.index(i)
  path = os.path.join(DATADIR,i)
  print(path)

  for img in os.listdir(path):
    img_array = imread(os.path.join(path,img))

    #resizing the images-> flatten->store
    img_resized = resize(img_array,(150,150,3))
    flat_data.append(img_resized.flatten())
    images.append(img_resized)
    target.append(class_num)

    plt.imshow(img_resized)
    plt.show()

#Converting into numpy array
flat_data = np.array(flat_data)
target = np.array(target)
images = np.array(images)

unique,count = np.unique(target, return_counts=True)
print(unique,count)
x = CATEGORIES
y = count
plt.bar(x,y,color='r')

plt.title('Gathered Data')
plt.xlabel('CATEGORIES')
plt.ylabel('Number of images')
for i in range(len(x)):
  plt.text(i,y[i],y[i])

#spliting data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(flat_data,target,test_size = 0.3,random_state=0)

from sklearn.svm import SVC
model = SVC()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

from sklearn.metrics import accuracy_score,classification_report
accuracy_score(y_pred,y_test)

#GRID-SEARCH CV

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = {'C':[0.1,1,10,100,1000],
           'gamma': [1,0.1,0.01,0.001,0.0001],
           'kernel': ['rbf','linear','poly']}

grid = GridSearchCV(SVC(),param_grid)

grid.fit(x_train,y_train)

y_pred2 = grid.predict(x_test)
y_pred2

y_test

from sklearn.metrics import accuracy_score, confusion_matrix,classification_report
print(accuracy_score(y_pred2,y_test))
print("Confusion Matrix:\n",confusion_matrix(y_pred2,y_test))
print(classification_report(y_pred2,y_test))

#Checking working

Test_dir = '/content/drive/MyDrive/Testing_images'

for im in os.listdir(Test_dir):
  flat_data = []
  img = imread(os.path.join(Test_dir,im))

  #resizing the images-> flatten->store
  img_resized = resize(img,(150,150,3))
  flat_data.append(img_resized.flatten())
  print(img.shape)
  y_out = grid.predict(flat_data)
  y_out = CATEGORIES[y_out[0]]
  print(f'Predicted Output : {y_out}')
  plt.imshow(img_resized)
  plt.show()

